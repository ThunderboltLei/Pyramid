<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:p="http://www.springframework.org/schema/p"
    xmlns:task="http://www.springframework.org/schema/task" xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
    http://www.springframework.org/schema/tx 
    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd"
    default-autowire="byName">

    <!-- 做本地测试，需要使用下面两个数据源 -->
    <bean id="dataSource1" class="com.mchange.v2.c3p0.ComboPooledDataSource"
        destroy-method="close">
        <property name="driverClass" value="${jdbc01.driverClassName}" />
        <property name="jdbcUrl" value="${jdbc01.url}" />
        <property name="user" value="${jdbc01.username}" />
        <property name="password" value="${jdbc01.password}" />
        <property name="initialPoolSize" value="30" />
        <property name="minPoolSize" value="30" />
        <property name="maxPoolSize" value="100" />
        <property name="maxIdleTime" value="60" />
        <property name="acquireIncrement" value="10" />
        <property name="idleConnectionTestPeriod" value="60" />
    </bean>
    <bean id="dataSource2" class="com.mchange.v2.c3p0.ComboPooledDataSource"
        destroy-method="close">
        <property name="driverClass" value="${jdbc02.driverClassName}" />
        <property name="jdbcUrl" value="${jdbc02.url}" />
        <property name="user" value="${jdbc02.username}" />
        <property name="password" value="${jdbc02.password}" />
        <property name="initialPoolSize" value="30" />
        <property name="minPoolSize" value="30" />
        <property name="maxPoolSize" value="100" />
        <property name="maxIdleTime" value="60" />
        <property name="acquireIncrement" value="10" />
        <property name="idleConnectionTestPeriod" value="60" />
    </bean>
    <!-- <bean id="dataSource1" -->
    <!-- class="org.springframework.jdbc.datasource.DriverManagerDataSource"> -->
    <!-- <property name="driverClassName" value="${jdbc01.driverClassName}" 
        /> -->
    <!-- <property name="url" value="${jdbc01.url}" /> -->
    <!-- <property name="username" value="${jdbc01.username}" /> -->
    <!-- <property name="password" value="${jdbc01.password}" /> -->
    <!-- </bean> -->
    <!-- <bean id="dataSource2" -->
    <!-- class="org.springframework.jdbc.datasource.DriverManagerDataSource"> -->
    <!-- <property name="driverClassName" value="${jdbc02.driverClassName}" 
        /> -->
    <!-- <property name="url" value="${jdbc02.url}" /> -->
    <!-- <property name="username" value="${jdbc02.username}" /> -->
    <!-- <property name="password" value="${jdbc02.password}" /> -->
    <!-- </bean> -->
    <!-- dynamic datasource -->
    <bean id="dataSource" class="com.pyramid.datasource.DynamicDataSource">
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <entry value-ref="dataSource1" key="dataSource1"></entry>
                <entry value-ref="dataSource2" key="dataSource2"></entry>
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="dataSource1"></property>
    </bean>
    <!-- 配置hibernate相关信息 -->
    <bean id="sessionFactory"
        class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="packagesToScan">
            <list>
                <value>com.pyramid.entity</value>
            </list>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                <!-- <prop key="hibernate.dialect">org.hibernate.dialect.Oracle9iDialect</prop> -->
                <prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext
                </prop>
                <!-- <prop key="hibernate.current_session_context_class">thread</prop> -->
                <prop key="hibernate.show_sql">false</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.use_sql_comments">true</prop>
                <!-- true为自动更新创造数据表 -->
                <prop key="hibernate.hbm2ddl.auto">none</prop>
                <!-- 释放jdbc resources 方式 如果不配置默认是auto (当然现在没有auto了，等同于"after_statement" 
                    or "after_transaction") 注意3.0以及之前默认是ON_CLOSE(也就是session关闭才释放jdbc链接) -->
                <prop key="hibernate.connection.release_mode">after_transaction</prop>
                <!-- 事务处理，自动关闭session -->
                <prop key="transaction.auto_close_session">false</prop>
                <!-- 自动提交 -->
                <prop key="connection.autocommit">false</prop>
                <!-- <prop key="jdbc.use_scrollable_resultset">false</prop> 
                    <prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop> -->
            </props>
        </property>
    </bean>
    <bean
        class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" />
    <!-- 开启AOP监听 只对当前配置文件有效 -->
    <aop:aspectj-autoproxy expose-proxy="true" />
    <!-- 开启注解事务 只对当前配置文件有效 -->
    <bean id="txManager"
        class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>
    <tx:annotation-driven transaction-manager="txManager" />
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="create*" propagation="REQUIRED" />
            <tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="merge*" propagation="REQUIRED" />
            <tx:method name="del*" propagation="REQUIRED" />
            <tx:method name="remove*" propagation="REQUIRED" />
            <tx:method name="put*" propagation="REQUIRED" />
            <tx:method name="use*" propagation="REQUIRED" />
            <tx:method name="get*" propagation="REQUIRED"
                read-only="true" />
            <tx:method name="count*" propagation="REQUIRED"
                read-only="true" />
            <tx:method name="find*" propagation="REQUIRED"
                read-only="true" />
            <tx:method name="list*" propagation="REQUIRED"
                read-only="true" />
            <tx:method name="*" read-only="true" />
        </tx:attributes>
    </tx:advice>
    <!-- <aop:config expose-proxy="true"> -->
    <aop:config proxy-target-class="true">
        <!-- 只对业务逻辑层实施事务 -->
        <aop:pointcut id="txPointcut"
            expression="execution(* com.pyramid.service.*.*(..))" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" />
    </aop:config>
</beans>